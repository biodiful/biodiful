package org.biodiful.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AnswerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnswerAllPropertiesEquals(Answer expected, Answer actual) {
        assertAnswerAutoGeneratedPropertiesEquals(expected, actual);
        assertAnswerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnswerAllUpdatablePropertiesEquals(Answer expected, Answer actual) {
        assertAnswerUpdatableFieldsEquals(expected, actual);
        assertAnswerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnswerAutoGeneratedPropertiesEquals(Answer expected, Answer actual) {
        assertThat(actual)
            .as("Verify Answer auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnswerUpdatableFieldsEquals(Answer expected, Answer actual) {
        assertThat(actual)
            .as("Verify Answer relevant properties")
            .satisfies(a -> assertThat(a.getJudgeID()).as("check judgeID").isEqualTo(expected.getJudgeID()))
            .satisfies(a -> assertThat(a.getChallenger1()).as("check challenger1").isEqualTo(expected.getChallenger1()))
            .satisfies(a -> assertThat(a.getChallenger2()).as("check challenger2").isEqualTo(expected.getChallenger2()))
            .satisfies(a -> assertThat(a.getWinner()).as("check winner").isEqualTo(expected.getWinner()))
            .satisfies(a -> assertThat(a.getStartTime()).as("check startTime").isEqualTo(expected.getStartTime()))
            .satisfies(a -> assertThat(a.getEndTime()).as("check endTime").isEqualTo(expected.getEndTime()))
            .satisfies(a -> assertThat(a.getPoolNumber()).as("check poolNumber").isEqualTo(expected.getPoolNumber()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnswerUpdatableRelationshipsEquals(Answer expected, Answer actual) {
        assertThat(actual)
            .as("Verify Answer relationships")
            .satisfies(a -> assertThat(a.getSurvey()).as("check survey").isEqualTo(expected.getSurvey()));
    }
}
